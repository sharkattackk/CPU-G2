module SHRA(
    input [31:0] xIn,
    output [31:0] xOut,
    input [4:0] shift
);

    reg [31:0] extended_xIn;

    // Extend the sign bit
    always @begin
        if (xIn[31] == 1) 
            extended_xIn = {32{1'b1}}; 
        else 
            extended_xIn = {32{1'b0}}; 
    end

    // Perform logical right shift
    always @begin
        if (shift >= 32) // If shift amount is greater than or equal to 32
            xOut = extended_xIn; // Output all 1s or 0s based on sign bit
        else
            xOut = {extended_xIn[31], extended_xIn[31:shift]}; // Logical right shift
    end

endmodule
